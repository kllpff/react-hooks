useState: предназначен для управления состоянием компонентов

useEffect: предназначен для перехвата различного рода изменений в компонентах, которые нельзя обработать внутри компонентов

useContext: позволяет подписываться на контекст React

useReducer: позволяет управлять локальным состоянием сложных компонентов

useCallback: позволяет управлять функциями обратного вызова

useMemo: предназначен для управления мемоизированными (грубо говоря кэшированными) значениями

useRef: возвращать некоторое изменяемое значение, например, ссылку на html-элементы DOM, которыми затем можно управлять в коде JavaScript

useImperativeHandle: настраивает объект, который передается родительскому компоненту при использовании ref

useLayoutEffect: аналогичен хуку useEffect(), но вызывается синхронно после всех изменений в структуре DOM

useDebugValue: предназначен для отображения некоторого значения в целях отладки

https://reactdev.ru/handbook/hooks-reference/#usestate